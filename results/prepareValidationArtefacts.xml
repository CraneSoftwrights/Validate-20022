<project default="make" xmlns:if="ant:if" xmlns:unless="ant:unless">

<taskdef name="grep" classname="ise.antelope.tasks.Find"/>

<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

<target name="make">
  <!--other constants and lookup values-->
  <property name="thisdir" value="${user.dir}"/>
  <property name="utilitydir" value="${thisdir}/utilities/"/>
  <echo message="dir=${dir}"/>
  <echo message="utilitydir=${utilitydir}"/>
  <echo message="thisdir=${thisdir}"/>
  <echo message="dateTime=${dateTime}"/>
  <echo message="ssGoogle=${ssGoogle}"/>
  <tstamp>
    <format property="wgettime" pattern="yyyy-MM-dd HH:mm:ss"/>
  </tstamp>
  <echo message="wgettime=${wgettime}"/>

  <!--and the configuration files found in the base directory-->
  <copy preservelastmodified="true" todir="${dir}">
    <fileset dir=".">
      <include name="**"/>
      <exclude name="**/.git/**"/>
      <exclude name="**/.github/**"/>
      <exclude name="**/${dir}/**"/>
    </fileset>
  </copy>

  <echo file="${dir}/readme-validation-artefacts-timestamp.txt"
        message="${dateTime}"/>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-validation-artefacts-okay"/>
    <param name="source" value="${dir}/readme-validation-artefacts.xml"/>
    <param name="target" value="${dir}/readme-validation-artefacts.html"/>
  </antcall>

  <uptodate targetfile="${dir}/readme-testSVRL4ISO20022errors.html"
            property="readme-testSVRL4ISO20022errors-okay">
    <srcfiles dir=".">
      <include name="testSVRL4ISO20022errors.xsl"/>
    </srcfiles>
  </uptodate>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-testSVRL4ISO20022errors-okay"/>
    <param name="source" value="testSVRL4ISO20022errors.xsl"/>
    <param name="target" value="${dir}/readme-testSVRL4ISO20022errors.html"/>
  </antcall>
  
  <mkdir dir="${dir}/xsl"/>
  <antcall target="-sch2xsl">
    <param name="schin" value="sch/all-iso-20022.rules.sch"/>
    <param name="xslout" value="${dir}/xsl/all-iso-20022.rules.xsl"/>
  </antcall>

  <!--copy directories-->
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}/val">
    <fileset dir="${dir}/val">
      <include name="**"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}/sch">
    <fileset dir="${dir}/sch">
      <include name="**"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}/xml">
    <fileset dir="${dir}/xml">
      <include name="**"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}/xsd">
    <fileset dir="${dir}/xsd">
      <include name="**"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}/xsl">
    <fileset dir="${dir}/xsl">
      <include name="**"/>
    </fileset>
  </copy>
  
  <!--add generated files into the distribution directory-->
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}/val">
    <fileset dir="${dir}">
      <include name="testSVRL4ISO20022errors.xsl"/>
      <include name="readme-testSVRL4ISO20022errors.html"/>
    </fileset>
  </copy>
  <copy preservelastmodified="true"
        todir="${dir}/Validate-20022-${dateTime}">
    <fileset dir="${dir}">
      <include name="readme-validation-artefacts.html"/>
    </fileset>
  </copy>

  <!--create GC files from Google-->
  <delete file="${dir}/BPC-Remittance-Rules-Spreadsheet-${dateTime}.gc"/>
  
  <echo file="${dir}/wget-spreadsheet-time.txt" message="${wgettime}"/>
  <echo file="${dir}/wget-spreadsheet-uri.txt" message="${ssGoogle}"/>
  <exec executable="wget">
    <arg value="--no-check-certificate"/>
    <arg value="-O"/>
    <arg value="${dir}/BPC-Remittance-Rules-Spreadsheet-Google.ods"/>
    <arg value="${ssGoogle}/export?format=ods"/>
  </exec>
  <property name="lengthen-uri"
            location="${dir}/bpcSSmassage.xml"/>
  <property name="ident-uri"
            location="${dir}/bpcSSidentification.xml"/>
  <antcallback target="-ods2gc" return="returnGCss">
    <param name="okay"   value="gc-sig-okay"/>
    <param name="source" 
                 value="${dir}/BPC-Remittance-Rules-Spreadsheet-Google.ods"/>
    <param name="target" 
      value="${dir}/BPC-Remittance-Rules-Spreadsheet-${dateTime}.gc"/>
    <param name="identification-uri" value="${ident-uri}"/>
    <param name="lengthen-model-name-uri" value="${lengthen-uri}"/>
    <param name="returnProperty" value="returnGCss"/>
  </antcallback>
  <condition property="gcSScreated">
    <and>
      <isset property="returnGCss"/>
      <equals arg1="${returnGCss}" arg2="0"/>
    </and>
  </condition>
  <echo unless:set="gcSScreated"
        message="ERROR creating BPC Remittance Rules genericode file"/>
  <copy unless:set="gcSScreated"
 file="${dir}/BPC-Remittance-Rules-Spreadsheet-${dateTime}.gc.error.txt"
tofile="${dir}/VALID-REMITTANCE-RULES-GC-FILE-NOT-GENERATED.txt"/>

  <!--label the directory for future reference-->
  <echo file="${dir}/Validate-20022-${dateTime}/release-${dateTime}.txt"
        message="${dateTime}"/>
  <echo file="${dir}/Validate-20022-${dateTime}/release.txt"
        message="${dateTime}"/>

  <!--package it all up-->
  <antcall target="-package"/>
</target>

<!--========================================================================-->

<!--========================================================================-->

<target name="-ods2gc" unless="${okay}">
  <delete file="${target}"/>
  <echo message='Rebuilding "${target}" GC file...'/>
  <java append="true" jar="utilities/saxon9he/saxon9he.jar" failonerror="false"
       fork="true">
    <arg value="-xsl:${utilitydir}Crane-ods2obdgc-${ods2obdgc}/Crane-ods2obdgc.xsl"/>
    <arg value="-o:${target}"/>
    <arg value="-it:ods-uri"/>
    <arg value="ods-uri=${source}"/>
    <arg value="identification-uri=${identification-uri}"/>
    <arg value="lengthen-model-name-uri=${lengthen-model-name-uri}"/>
    <arg value="raw-sheet-long-name=Worksheet Tab"/>
    <arg value="row-number-column-name=Row Number"/>
  </java>
  <available property="done" file="${target}"/>
  <sequential unless:set="done">
    <echo message="Unable to create GC file: ${target}"/>
    <property unless:set="done" name="${resultProperty}" value="1"/>
  </sequential>
  <sequential if:set="done">
    <property name="jarLocation" location="${utilitydir}xjparse"/>
    <echo message='Validating "${target}" GC file...'/>
    <java resultproperty="resultProperty" append="true" fork="true"
          classname="com.nwalsh.parsers.XJParse"
          output="${target}.error.txt"
          classpath="${jarLocation}/xjparse.jar">
       <arg value="-S"/>
       <arg value="${utilitydir}genericode/xsd/genericode.xsd"/>
       <arg value="${target}"/>
    </java>
    <condition property="okayGCparse">
      <equals arg1="${resultProperty}" arg2="0"/>
    </condition>
    <echo unless:set="okayGCparse" file="${target}.error.txt" append="true"/>
    <echo unless:set="okayGCparse" file="${target}.error.txt" append="true"
          message=
"If no 'content.xml' file found, check that the addressed spreadsheet has public access"/>
    <delete if:set="okayGCparse" file="${target}.error.txt"/>
    <property name="${returnProperty}" value="${resultProperty}"/>
  </sequential>
</target>

<target name="-package">
  
  <!--prepare the tools distribution-->
  <delete dir="${dir}/Validate-20022-tools-${dateTime}"/>
  <mkdir dir="${dir}/Validate-20022-tools-${dateTime}"/>

  <!--move dev files to the archive archive directory-->
  <move preservelastmodified="true" includeEmptyDirs="false" 
todir="${dir}/Validate-20022-tools-${dateTime}/archive-only-not-in-final-distribution">
    <fileset dir="${dir}">
      <include name="*"/>
      <exclude name="artefacts.*.txt"/>
    </fileset>
  </move>
  
  <!--create end-user distributable ZIP-->
  <mkdir dir="${dir}/zipdir"/>
  <move preservelastmodified="true" todir="${dir}/zipdir">
    <fileset dir="${dir}">
      <include name="Validate-20022-${dateTime}/**"/>
    </fileset>
  </move>
  <delete dir="${dir}/Validate-20022-${dateTime}"/>
  <zip 
destfile="${dir}/Validate-20022-tools-${dateTime}/Validate-20022-${dateTime}.zip"
       basedir="${dir}/zipdir" duplicate="preserve">
    <fileset dir="${dir}/zipdir"/>
  </zip>

  <delete dir="${dir}/zipdir"/>
  <delete dir="${dir}/Validate-20022-${dateTime}"/>

  <!--documentation-->
  <echo message="dateTime=${dateTime}"/>
  
</target>

<target name="-make-doc" unless="${okay}">
  <delete file="${target}"/>
  <echo message='Rebuilding "${target}" documentation...'/>
  <java failonerror="yes" append="true" classname="com.icl.saxon.StyleSheet">
    <arg value="-w2"/>
    <arg value="-a"/>
    <arg value="-o"/>
    <arg value="${target}"/>
    <arg value="${source}"/>
  </java>
  <available property="done" file="${target}"/>
  <fail unless="done" message="Unable to create documentation: ${target}"/>
  <echo message="Checking..."/>
  <loadfile property="temp" srcFile="${target}"/>
  <length property="length" string="${temp}"/>
  <condition property="${target}-found">
    <equals arg1="${length}" arg2="0"/>
  </condition>
  <grep caseinsensitive="true" in="${temp}" 
        regex="inconsistencies detected" property="${target}-found"/>
  <antcall target="-error-doc-html"/>
  <echo message="Clean build of: ${target}"/>
</target>

<!--this process sets the time stamp of the output to be 2 minutes before
    the time stamp of the input so that the output will be dected to be
    needed to be regenerated next time around; without it, the error
    will be reported once, but not multiple times-->
<target name="-error-doc-html" if="${target}-found">
  <tstamp>
    <format property="then" pattern="yyyyMMdd-HHmmss"/>
    <format property="earlier" pattern="yyyyMMdd-HHmmss" offset="-2" 
            unit="minute"/>
  </tstamp>
  <touch datetime="${earlier}" pattern="yyyyMMdd-HHmmss" file="${target}"/>
  <touch datetime="${then}" pattern="yyyyMMdd-HHmmss" file="${source}"/>
  <echo message="Inconsistencies detected: ${source}"/>
  <copy tofile="${dir}/Validate-20022-${dateTime}/INCONSISTENCIES-DETECTED-${source}.html"
        file="${target}"/>
</target>

<target name="-sch2xsl" unless="${okay}">
  <delete file="${xslout}"/>

  <echo message="Creating ${xslout} from ${schin}..."/>
  <java append="true" classname="net.sf.saxon.Transform">
     <arg value="-o:${xslout}"/>
     <arg value="-s:${schin}"/>
     <arg value="-xsl:${utilitydir}schxslt/2.0/pipeline-for-svrl.xsl"/>
  </java>

</target>

</project>