<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl"
                 href="utilities/article/article-html.xsl"?>
<!DOCTYPE article [
<!ENTITY stamp SYSTEM "readme-validation-artefacts-timestamp.txt">
<!ENTITY % google-uri-sys-decl SYSTEM "readme-validation-artefacts.ent">
%google-uri-sys-decl;
]>
<article conformance="ids ebuzzwords quotes">
  <title>ISO 20022 Validation Artifacts - &stamp;</title>
  <articleinfo>
    <pubdate>&stamp;</pubdate>
    <copyright>
      <year>2022</year>
      <year>Crane Softwrights Ltd.</year>
    </copyright>
    <legalnotice>
      <title>Executive summary</title>
      <para>This documents the use of demonstration validation artefacts that can be incorporated into one’s process of accepting ISO 20022 XML instances.</para>
      <para>This environment is made freely available with no constraints on use and no responsibility or warranty of use.</para>
    </legalnotice>
  </articleinfo>
  <section id="S-INTRODUCTION">
    <title>Introduction</title>
    <para>To make the validation of XML instances of select ISO 20022 schemas convenient, this environment provides Windows drag-and-drop, Windows command-line, and Shell command-line invocations of a two-phase validation process.</para>
    <para>ISO 20022 publishes a schema of hierarchy, granularity, cardinality, and lexical constraints that are imposed on XML documents to be considered valid ISO 20022 documents. </para>
    <para>Layered on top of those constraints are additional cardinality constraints imposed by the Business Payments Coalition (BPC) as a minimal set of value constraints expressed in <ulink url="&google-uri;"/>. The committee may impose further cardinality and value constraints in the
      future.</para>
    <para>The validation process involves two phases: </para>
    <orderedlist>
      <listitem>
        <para>W3C XML schema validation according to the untouched ISO 20022 XSD schema, and</para>
      </listitem>
      <listitem>
        <para>rule validation according to the BPC list of additional document constraints maintained in the committee’s Google spreadsheet as a set of ISO Schematron contexts and expressions found at .</para>
      </listitem>
    </orderedlist>
    <figure id="F-TWO-PHASE-VALIDATION">
      <title>Two-phase validation</title>
      <mediaobject>
        <imageobject>
          <imagedata role="html-embed" fileref="README-steps.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The numbered artefacts depicted are as follows:</para>
    <orderedlist>
      <listitem>
        <para>W3C XML Schema XSD file as published by ISO 20022,</para>
      </listitem>
      <listitem>
        <para>W3C XSLT 2.0 stylesheet transforming the incoming XML document to a validation result by checking the BPC constraints,</para>
      </listitem>
      <listitem>
        <para>ISO/IEC 19757-3 Schematron schema of BPC constraints that is transformed into the XSLT used for validation, and</para>
      </listitem>
      <listitem>
        <para>ISO/IEC 26300 Open Document Format (ODF) spreadsheet ODS XML exported from the committee Google spreadsheet that is transformed into the Schematron schema.</para>
      </listitem>
    </orderedlist>
    <para>Not shown in the diagram are an XSLT stylesheet that transforms the XML output of the depicted XSLT transformation into a simple text file and a validation true/false result, the XSLT stylesheets that transform the ODF into Schematron, and the XSLT stylesheets that transform the Schematron
      into XSLT.</para>
  </section>
  <section id="S-SCHEMAS">
    <title>Schemas</title>
    <para>In the <literal>iso/</literal> subdirectory the <literal>all-iso-20022.xsd</literal> schema imports the selection of ISO 20022 schemas, also found in the <literal>iso/</literal> subdirectory.</para>
    <para>At this time two different schemas are involved in the one validation: <literal>remt.001.001.05.xsd</literal> and <literal>remt.002.001.02.xsd</literal>.</para>
  </section>
  <section id="S-DATA-INTEGRITY-CONSTRAINT-CHECKING">
    <title>Data integrity constraint checking</title>
    <para>In the <literal>bpc/</literal> subdirectory are all of the data integrity checks to be performed after successful XSD schema validation expressed in different syntaxes:</para>
    <itemizedlist>
      <listitem>
        <para><literal>BPC-Remittance-Rules-Spreadsheet-{time-stamp}.xls</literal> - human-readable spreadsheet</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Remittance-Rules-Spreadsheet-{time-stamp}.ods</literal> - human-readable spreadsheet</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Remittance-Rules-Spreadsheet-{time-stamp}.gc</literal> - machine-readable spreadsheet summary</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Remittance-Rules-Spreadsheet.sch</literal> - ISO/IEC 19757-3 Schematron compile-time expression of data integrity rules</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Remittance-Rules-Spreadsheet.xsl</literal> - W3C Extensible Stylesheet Language runtime expression of data integrity rules</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-VALIDATION-FILES">
    <title>Validation files</title>
    <para>The demonstration directory is the <literal>val/</literal> directory:</para>
    <itemizedlist>
      <listitem>
        <para><literal>*.xml</literal> - demonstration test files</para>
      </listitem>
      <listitem>
        <para><literal>*.jar</literal> - open-source project Java executables implementing validation and transformation (see the included notices for open-source details)</para>
      </listitem>
      <listitem>
        <para><literal>*.sh</literal> - Shell-based invocations in a *nix terminal</para>
      </listitem>
      <listitem>
        <para><literal>*.bat</literal> - Windows-based invocations in a DOS command box</para>
      </listitem>
      <listitem>
        <para><literal>windows-drag-n-drop/*.bat</literal> - Windows-based invocations using drag-n-drop functionality supporting dropping the XML file to be validated onto the batch file in Windows Explorer</para>
      </listitem>
      <listitem>
        <para><literal>testall.*</literal> - invocations for each of the files in the <literal>xml/</literal> subdirectory</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-JAVA">
    <title>Java</title>
    <para>Java must be installed in the environment before the demonstration can run or one can validate their own test files. To know if Java is ready to be used, one simply enters the command that brings up the “Usage:” summary:</para>
    <programlisting>C:\>java
Usage: java [-options] class [args...]
           (to execute a class)
   or  java [-options] -jar jarfile [args...]
           (to execute a jar file)
where options include:
<emphasis>...followed by many lines...</emphasis></programlisting>
    <para>If the command cannot be found, an error message will be displayed.</para>
  </section>
  <section id="S-DEMONSTRATION-EXECUTION">
    <title>Demonstration execution</title>
    <para>A running Java-based demonstration of the two-phase ingestion of an ISO 20022 XML document is in the <literal>val/</literal> subdirectory. </para>
    <para>There are four illustrative XML instances being validated:</para>
    <itemizedlist>
      <listitem>
        <para><literal>iso-20022-test-bad-syntax.xml</literal> - a document with an XML syntax error on line 6</para>
        <itemizedlist>
          <listitem>
            <para>the end delimiter of the closing tag for the <literal>MsgId</literal> element is missing</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>iso-20022-test-bad-model.xml</literal> - a document with a ISO 20022 model error on line 6</para>
        <itemizedlist>
          <listitem>
            <para>the expected date and time element contains only a date value</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>iso-20022-test-bad-rule.xml</literal> - a document with a BPC data integrity error for the element <literal>/Document/RmtAdvc[1]/RmtInf[1]</literal></para>
        <itemizedlist>
          <listitem>
            <para>there are no <literal>&lt;Strd></literal> element children of <literal>&lt;RmtInf></literal> as required by the BPC </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>iso-20022-test-good.xml</literal> - a valid document without violating Schematron data integrity constraints</para>
      </listitem>
    </itemizedlist>
    <para>To run the demonstration there is an invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows command line:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val\
test.bat</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows explorer:</para>
        <itemizedlist>
          <listitem>
            <para>double-click on <literal>test.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end)</para>
          </listitem>
          <listitem>
            <para>note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on increasing the length of the history)</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val/
sh test.sh</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>The following is a transcript of the output of running the demonstration:</para>
    <programlisting>############################################################
Validating "iso-20022-test-bad-syntax.xml"
############################################################
===== Phase 1: XSD schema validation =====
org.xml.sax.SAXParseException; systemId: val/iso-20022-test-bad-syntax.xml;
 lineNumber: 6; columnNumber: 7; The end-tag for element type "MsgId" must
 end with a '>' delimiter.
 at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
 at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
 at org.apache.xerces.jaxp.SAXParserImpl.parse(Unknown Source)
 at java.xml/javax.xml.parsers.SAXParser.parse(SAXParser.java:276)
 at com.nwalsh.parsers.XJParser.xsdParse(Unknown Source)
 at com.nwalsh.parsers.XJParser.parse(Unknown Source)
 at com.nwalsh.parsers.XJParse.run(Unknown Source)
 at com.nwalsh.parsers.XJParse.main(Unknown Source)
Exception in thread "main" java.lang.NullPointerException
 at com.nwalsh.parsers.XJParser.printParseStats(Unknown Source)
 at com.nwalsh.parsers.XJParse.run(Unknown Source)
 at com.nwalsh.parsers.XJParse.main(Unknown Source)
Attempting well-formed, namespace-aware parse
Fatal error:val/iso-20022-test-bad-syntax.xml:6:7:The end-tag for element
 type "MsgId" must end with a '>' delimiter.

############################################################
Validating "iso-20022-test-bad-model.xml"
############################################################
===== Phase 1: XSD schema validation =====
Attempting well-formed, namespace-aware parse
Error:val/iso-20022-test-bad-model.xml:6:36:cvc-datatype-valid.1.2.1:
 '2022-10-01' is not a valid value for 'dateTime'.
Error:val/iso-20022-test-bad-model.xml:6:36:cvc-type.3.1.3: The value
 '2022-10-01' of element 'CreDtTm' is not valid.
Parse succeeded (0.20) with 2 errors and no warnings.

############################################################
Validating "iso-20022-test-bad-rule.xml"
############################################################
===== Phase 1: XSD schema validation =====
No schema validation errors.
===== Phase 2: Data integrity validation =====
1. Structured remittance information is missing. (remt.001-007)
 /Document/RmtAdvc[1]/RmtInf[1] / count(Strd)&amp;gt;=1
Count of data errors: 1


The following error report is simply the exit mechanism and can be ignored:
Error in xsl:message/@terminate on line 119 column 34 of testSVRL4ISO20022errors.xsl:
 XTMM9000: Processing terminated by xsl:message at line 119 in testSVRL4ISO20022errors.xsl
Processing terminated by xsl:message at line 119 in testSVRL4ISO20022errors.xsl

############################################################
Validating "iso-20022-test-good.xml"
############################################################
===== Phase 1: XSD schema validation =====
No schema validation errors.
===== Phase 2: Data integrity validation =====
No data integrity validation errors.</programlisting>
    <para>Also included is a script to run all of the document types in both of the customizations for both “good” and “bad” test files:</para>
    <itemizedlist>
      <listitem>
        <para>Windows command line:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val\
testall.bat</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows explorer:</para>
        <itemizedlist>
          <listitem>
            <para>double-click on <literal>testall.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end)</para>
          </listitem>
          <listitem>
            <para>note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on increasing the length of the history)</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val/
sh testall.sh</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-DATA-ERRORS-AND-INTERNAL-ERRORS">
    <title>Data errors and internal errors</title>
    <para>When running the Schematron script, there are two kinds of reports: a data constraint error or an internal error.</para>
    <para>A data constraint error report starts with an enumeration of the error, followed by the error message, followed by the context of the error, followed by <literal>" / "</literal>, followed by the failed rule expression.</para>
    <para>Internal errors are of particular importance to the developers of the Schematron, as these reflect previously-undetected errors or improvements in the schema that should be repaired. These should be reported.</para>
  </section>
  <section id="S-VALIDATING-ONES-OWN-TEST-FILES">
    <title>Validating one’s own test files</title>
    <para>To validate a test document of one’s own that is found in your local computer file system there is a Java-based invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows drag-n-drop:</para>
        <itemizedlist>
          <listitem>
            <para>fully extract the nested ZIP files into your file system because drag-n-drop does not work from inside ZIP extractor virtual directories</para>
          </listitem>
          <listitem>
            <para>open the unzipped <literal>val/windows-drag-n-drop/</literal> directory in Windows Explorer to reveal the available invocations</para>
          </listitem>
          <listitem>
            <para>drag your XML file from Windows Explorer where it is being edited, and drop it onto the corresponding invocation batch file performing the desired validation</para>
            <figure id="F-WINDOWS-DRAG-N-DROP">
              <title>Windows Drag-n-Drop</title>
              <mediaobject>
                <imageobject>
                  <imagedata role="html-embed" fileref="README-drag.svg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>a dynamic command DOS box window will open up revealing the results until a key is pressed to make the window disappear (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on adjusting the length of the history)</para>
            <figure id="F-WINDOWS-DROP-EXECUTION">
              <title>Windows Drop Execution</title>
              <mediaobject>
                <imageobject>
                  <imagedata role="html-embed" fileref="README-drop.svg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows DOS prompt:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>validate-20022.bat xml-file</programlisting>for example from the <literal>test.bat</literal> demonstration:</para>
            <programlisting>validate-20022.bat test.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>sh validate-20022.sh xml-file</programlisting>for example from the <literal>test.sh</literal> demonstration:</para>
            <programlisting>sh validate-20022.sh test.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>When there is an error of any kind, the script creates a file named by adding the “<literal>.error.txt</literal>” suffix to the input file name and records the error information in that file.</para>
    <para>When there is a data integrity error, the script also creates a file named by adding the “<literal>.svrl.xml</literal>” suffix to the input file name and records the Schematron SVRL record information in that file.</para>
    <para>For example, if one has a test file for customization ‘core’ named <literal>myISO20022Test.xml</literal> in the <literal>val\</literal> directory then in Windows one would use:</para>
    <para><programlisting>validate-20022.bat myISO20022Test.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>Validate-20022-20221003-1440z\val\validate-20022.bat myISO20022Test.xml</programlisting>
    <para>And if one is using Shell in the <literal>val/</literal> directory one would use:</para>
    <para><programlisting>sh validate-20022.sh myISO20022Test.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>sh Validate-20022-20221003-1440z/val/validate-20022.sh myISO20022Test.xml</programlisting>
  </section>
  <!--<section id="S-EXAMPLES"><title>Examples</title><para>The <literal>examples/</literal> subdirectory has a number of example BPC UBL XML instances. The <literal>val/test-examples.bat</literal> and <literal>val/test-examples.sh</literal> invocations check each of these examples. In Windows Explorer, double-click on <literal>test-examples.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end). Note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on increasing the length of the history).</para></section>-->
  <section id="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY">
    <title>Configuring Windows DOS box history</title>
    <para>Should the dynamic command DOS box history be too short for a long report, the height of the box window (dictating the history) can be increased as follows:</para>
    <itemizedlist>
      <listitem>
        <para>execute any of the Windows batch files so that the dynamic DOS box is presented on the screen (do not press any key when the batch file finishes executing)</para>
      </listitem>
      <listitem>
        <para>either left-click on the DOS box icon in the title bar, or right-click anywhere on the title bar</para>
      </listitem>
      <listitem>
        <para>select “Properties”</para>
      </listitem>
      <listitem>
        <para>click on the “Layout” tab</para>
      </listitem>
      <listitem>
        <para>in the “Screen Buffer Size” set of values, change the “Height” value typing in a large number such as “2000”</para>
      </listitem>
      <listitem>
        <para>click on the “OK” button</para>
      </listitem>
      <listitem>
        <para>when the batch file finishes executing, press any key to exit</para>
      </listitem>
    </itemizedlist>
    <para>The next time the dynamic command DOS box is used, the new setting for the height will be in play. When the batch file completes execution, one can scroll up through the history to see the complete report.</para>
  </section>
  <section id="S-REGRESSION-TESTS">
    <title>Regression tests</title>
    <para>The <literal>xml/</literal> directory includes the <literal>regression/</literal> directory with a single test file for each of the BPC errors. These test files were used to check the integrity of the rule expression in XPath. The shell invocation of the regression tests is in the
        <literal>val/</literal> directory, named <literal>testregression.sh</literal>.</para>
  </section>
  <!---->
  <!--  <bibliography>
    <para>See article-bibliography.xml for bibliographic entries.</para>
  </bibliography>-->
</article>
