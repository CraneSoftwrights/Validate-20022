<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl"
                 href="utilities/article/article-html.xsl"?>
<!DOCTYPE article [
<!ENTITY stamp SYSTEM "readme-validation-artefacts-timestamp.txt">
]>
<article conformance="ids ebuzzwords quotes">
  <title>ISO 20022 Validation Artifacts - &stamp;</title>
  <articleinfo>
    <pubdate>&stamp;</pubdate>
    <copyright>
      <year>2022</year>
      <year>Crane Softwrights Ltd.</year>
    </copyright>
    <legalnotice>
      <title>Executive summary</title>
      <para>This documents the use of demonstration validation artefacts that can be incorporated into one’s process of accepting ISO 20022 XML instances.</para>
      <para>This environment is made freely available with no constraints on use and no responsibility or warranty of use.</para>
    </legalnotice>
  </articleinfo>
  <section id="S-INTRODUCTION">
    <title>Introduction</title>
    <para>To make the validation of XML instances of select ISO 20022 schemas convenient, this environment provides a Windows drag-and-drop, Windows command-line, and Shell command-line invocations.</para>
  </section>
  <section id="S-SCHEMAS">
    <title>Schemas</title>
    <para>In the <literal>xsd/</literal> subdirectory the <literal>all-iso-20022.xsd</literal> schema imports the selection of ISO 20022 schemas, also found in the <literal>xsd/</literal> subdirectory.</para>
  </section>
  <section id="S-DATA-INTEGRITY-CONSTRAINT-CHECKING">
    <title>Data integrity constraint checking</title>
    <para>In the <literal>sch/</literal> subdirectory the <literal>all-iso-20022.rules.sch</literal> Schematron schema declares all of the data integrity checks to be performed after successful XSD schema validation.</para>
    <para>In the <literal>xsl/</literal> subdirectory the <literal>all-iso-20022.rules.xsl</literal> XSLT stylesheet expresses the runtime implementation of the Schematron rules.</para>
  </section>
  <section id="S-VALIDATION-FILES">
    <title>Validation files</title>
    <para>The demonstration directory is the <literal>val/</literal> directory:</para>
    <itemizedlist>
      <listitem>
        <para><literal>*.xml</literal> - demonstration test files</para>
      </listitem>
      <listitem>
        <para><literal>*.jar</literal> - open-source project Java executables implementing validation and transformation (see the included notices for open-source details)</para>
      </listitem>
      <listitem>
        <para><literal>*.sh</literal> - Shell-based invocations in a *nix terminal</para>
      </listitem>
      <listitem>
        <para><literal>*.bat</literal> - Windows-based invocations in a DOS command box</para>
      </listitem>
      <listitem>
        <para><literal>windows-drag-n-drop/*.bat</literal> - Windows-based invocations using drag-n-drop functionality supporting dropping the XML file to be validated onto the batch file in Windows Explorer</para>
      </listitem>
      <listitem>
        <para><literal>testall.*</literal> - invocations for each of the files in the <literal>xml/</literal> subdirectory</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-JAVA">
    <title>Java</title>
    <para>Java must be installed in the environment before the demonstration can run or one can validate their own test files. To know if Java is ready to be used, one simply enters the command that brings up the “Usage:” summary:</para>
    <programlisting>C:\>java
Usage: java [-options] class [args...]
           (to execute a class)
   or  java [-options] -jar jarfile [args...]
           (to execute a jar file)
where options include:
<emphasis>...followed by many lines...</emphasis></programlisting>
    <para>If the command cannot be found, an error message will be displayed.</para>
  </section>
  <!--<section id="S-DEMONSTRATION-EXECUTION"><title>Demonstration execution</title><para>A running Java-based demonstration of the two-phase ingestion of a BPC XML document is in the <literal>val/</literal> subdirectory. </para><para>There are four illustrative XML instances being validated:</para><itemizedlist><listitem><para><literal>Invoice-test-bad-syntax.xml</literal> - a document with an XML syntax error on line 9</para><itemizedlist><listitem><para>the end delimiter of the closing tag for the <literal>cbc:ID</literal> element is missing</para></listitem></itemizedlist></listitem><listitem><para><literal>Invoice-test-bad-model.xml</literal> - a document with a UBL model error on line 9</para><itemizedlist><listitem><para>the <literal>cbc:ID</literal> element is misspelled as <literal>cbc:IDxxxxx</literal></para></listitem></itemizedlist></listitem><listitem><para><literal>Invoice-test-bad-data.xml</literal> - a document with one BPC data integrity for customization ‘core’ and two BPC data integrity errors for customization ‘extended’:</para><itemizedlist><listitem><para>the first error is a UBL error violating the rule that all elements must have some content, either text or other elements (but not both), and never can be empty</para></listitem><listitem><para>the second error is a BPC error violating the rule that a party’s name cannot be absent nor is there allowed to be more than one name for a party</para></listitem></itemizedlist></listitem><listitem><para><literal>Invoice-test-good.xml</literal> - a valid UBL document without violating BPC data integrity constraints</para></listitem></itemizedlist><para>To run the demonstration there is an invocation for each of the Windows and Shell environments:</para><itemizedlist><listitem><para>Windows command line:</para><itemizedlist><listitem><para><programlisting>cd val\
test.bat</programlisting></para></listitem></itemizedlist></listitem><listitem><para>Windows explorer:</para><itemizedlist><listitem><para>double-click on <literal>test.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end)</para></listitem><listitem><para>note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on increasing the length of the history)</para></listitem></itemizedlist></listitem><listitem><para>Shell:</para><itemizedlist><listitem><para><programlisting>cd val/
sh test.sh</programlisting></para></listitem></itemizedlist></listitem></itemizedlist><para>The following is a transcript of the output of running the demonstration:</para><programlisting>############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-bad-syntax.xml"
############################################################
===== Phase 1: XSD schema validation =====
org.xml.sax.SAXParseException; systemId: file:///Users/admin/u/git/bpc/
 bpc-semantics-spreadsheet-tools/results/bpc-semantics-tools-0.3-test/
 bpc-semantics-0.3-test/val/Invoice-Core-test-bad-syntax.xml;
 lineNumber: 10; columnNumber: 2; The end-tag for element type "cbc:ID"
 must end with a '>' delimiter.
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl.parse(Unknown Source)
	at javax.xml.parsers.SAXParser.parse(SAXParser.java:274)
	at com.nwalsh.parsers.XJParser.xsdParse(Unknown Source)
	at com.nwalsh.parsers.XJParser.parse(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Exception in thread "main" java.lang.NullPointerException
	at com.nwalsh.parsers.XJParser.printParseStats(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Attempting well-formed, namespace-aware parse
Fatal error:file:///Users/admin/u/git/bpc/bpc-semantics-spreadsheet-tools/results/
 bpc-semantics-tools-0.3-test/bpc-semantics-0.3-test/val/
 Invoice-Core-test-bad-syntax.xml:10:2:The end-tag for element type "cbc:ID"
 must end with a '>' delimiter.

############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-bad-model.xml"
############################################################
===== Phase 1: XSD schema validation =====
Attempting well-formed, namespace-aware parse
Error:file:///Users/admin/u/git/bpc/bpc-semantics-spreadsheet-tools/results/
 bpc-semantics-tools-0.3-test/bpc-semantics-0.3-test/val/
 Invoice-Core-test-bad-model.xml:9:16:cvc-complex-type.2.4.a: Invalid content
 was found starting with element 'cbc:IDxxxxx'. One of
 '{"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":ID}' is expected.
Parse succeeded (0.9) with 1 error and no warnings.

############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-bad-data.xml"
############################################################
===== Phase 1: XSD schema validation =====
No schema validation errors.
===== Phase 2: BPC customization "Core" data integrity validation =====
1. [IND5] Elements SHALL NOT be empty /Invoice/cac:AccountingCustomerParty[1]/
 cac:Party[1]/cac:PostalAddress[1]/cbc:PostalZone[1] / true()
2. Fewer or more than one trading name. /Invoice/cac:AccountingCustomerParty[1] /
 count(cac:Party/cac:PartyName/cbc:Name) = 1 (:NABT-045 Row 105 Tab
 'Invoice, Credit Note':)
Count of data errors: 2


The following error report is simply the exit mechanism and can be ignored:
Error in xsl:message/@terminate on line 120 column 34 of testSVRL4UBLerrors.xsl:
  XTMM9000: Processing terminated by xsl:message at line 120 in testSVRL4UBLerrors.xsl
Processing terminated by xsl:message at line 120 in testSVRL4UBLerrors.xsl

############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-good.xml"
############################################################
===== Phase 1: XSD schema validation =====
No schema validation errors.
===== Phase 2: BPC customization "Core" data integrity validation =====
No data integrity validation errors.</programlisting><para>Also included is a script to run all of the document types in both of the customizations for both “good” and “bad” test files:</para><itemizedlist><listitem><para>Windows command line:</para><itemizedlist><listitem><para><programlisting>cd val\
testall.bat</programlisting></para></listitem></itemizedlist></listitem><listitem><para>Windows explorer:</para><itemizedlist><listitem><para>double-click on <literal>testall.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end)</para></listitem><listitem><para>note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on increasing the length of the history)</para></listitem></itemizedlist></listitem><listitem><para>Shell:</para><itemizedlist><listitem><para><programlisting>cd val/
sh testall.sh</programlisting></para></listitem></itemizedlist></listitem></itemizedlist></section>-->
  <!--<section id="S-DATA-ERRORS-AND-INTERNAL-ERRORS"><title>Data errors and internal errors</title><para>There are two kinds of data error reports emitted and one kind of internal error report emitted.</para><para>A UBL data constraint error report begins with a square-bracketed UBL conformance rule reference such as the following:</para><programlisting>1. [IND5] Elements SHALL NOT be empty /Invoice/cac:AccountingCustomerParty[1]/
 cac:Party[1]/cac:PostalAddress[1]/cbc:PostalZone[1] / true()</programlisting><para>A BPC data integrity constraint error includes references into the spreadsheet where more information may be found regarding the problem. In this example, the user would refer to the North American Business Term (NABT) numbered 45 that is found on row 105 in the worksheet tab “Invoice, Credit Note” of the BPC Semantic Model spreadsheet:</para><programlisting>2. Fewer or more than one trading name. /Invoice/cac:AccountingCustomerParty[1]
 / count(cac:Party/cac:PartyName/cbc:Name) = 1 (:NABT-045 Row 105 Tab
 'Invoice, Credit Note':)</programlisting><para>Internal errors are of particular importance to the BPC Semantic technical subgroup, as these reflect previously-undetected errors or improvements in the spreadsheet that should be repaired readily. Without the repair, the Schematron rule for the identified semantic component is not being performed, and so there is no confidence that the suppressed rule is or is not being violated.</para><programlisting>INTERNAL ERROR 1. Suppressed rule: "cac:TaxCategory (:NABT-118 NABT-927
 Row 200 251 Tab 'Invoice, Credit Note':)" shadowed by rule:
 "/Invoice:Invoice/cac:AllowanceCharge/cac:TaxCategory
 (:NABT-095 NABT-096 NABT-102 Row 164 165 174 Tab 'Invoice, Credit Note':)"</programlisting><para>Please consider taking the time to forward to the BPC Semantic technical subgroup an anonymized version of the XML document that triggers the internal errors as this will assist the team in repairing/improving the semantic spreadsheet faults.</para></section>-->
  <section id="S-VALIDATING-ONES-OWN-TEST-FILES">
    <title>Validating one’s own test files</title>
    <para>To validate a test document of one’s own that is found in your local computer file system there is a Java-based invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows drag-n-drop:</para>
        <itemizedlist>
          <listitem>
            <para>fully extract the nested ZIP files into your file system because drag-n-drop does not work from inside ZIP extractor virtual directories</para>
          </listitem>
          <listitem>
            <para>open the unzipped <literal>val/windows-drag-n-drop/</literal> directory in Windows Explorer to reveal the available invocations</para>
          </listitem>
          <listitem>
            <para>drag your XML file from Windows Explorer where it is being edited, and drop it onto the corresponding invocation batch file performing the desired validation</para>
            <figure id="F-WINDOWS-DRAG-N-DROP">
              <title>Windows Drag-n-Drop</title>
              <mediaobject>
                <imageobject>
                  <imagedata role="html-embed" fileref="README-drag.svg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>a dynamic command DOS box window will open up revealing the results until a key is pressed to make the window disappear (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on adjusting the length of the history)</para>
            <figure id="F-WINDOWS-DROP-EXECUTION">
              <title>Windows Drop Execution</title>
              <mediaobject>
                <imageobject>
                  <imagedata role="html-embed" fileref="README-drop.svg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows DOS prompt:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>validate-20022.bat xml-file</programlisting>for example from the <literal>test.bat</literal> demonstration:</para>
            <programlisting>validate-20022.bat test.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>sh validate-20022.sh xml-file</programlisting>for example from the <literal>test.sh</literal> demonstration:</para>
            <programlisting>sh validate-20022.sh test.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>When there is an error of any kind, the script creates a file named by adding the “<literal>.error.txt</literal>” suffix to the input file name and records the error information in that file.</para>
    <para>When there is a data integrity error, the script also creates a file named by adding the “<literal>.svrl.xml</literal>” suffix to the input file name and records the Schematron SVRL record information in that file.</para>
    <para>For example, if one has a test file for customization ‘core’ named <literal>myISO20022Test.xml</literal> in the <literal>val\</literal> directory then in Windows one would use:</para>
    <para><programlisting>validate-20022.bat myISO20022Test.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>Validate-20022-20221003-1440z\val\validate-20022.bat myISO20022Test.xml</programlisting>
    <para>And if one is using Shell in the <literal>val/</literal> directory one would use:</para>
    <para><programlisting>sh validate-20022.sh myISO20022Test.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>sh Validate-20022-20221003-1440z/val/validate-20022.sh myISO20022Test.xml</programlisting>
  </section>
  <!--<section id="S-EXAMPLES"><title>Examples</title><para>The <literal>examples/</literal> subdirectory has a number of example BPC UBL XML instances. The <literal>val/test-examples.bat</literal> and <literal>val/test-examples.sh</literal> invocations check each of these examples. In Windows Explorer, double-click on <literal>test-examples.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end). Note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them (see <xref linkend="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY"/> for details on increasing the length of the history).</para></section>-->
  <section id="S-CONFIGURING-WINDOWS-DOS-BOX-HISTORY">
    <title>Configuring Windows DOS box history</title>
    <para>Should the dynamic command DOS box history be too short for a long report, the height of the box window (dictating the history) can be increased as follows:</para>
    <itemizedlist>
      <listitem>
        <para>execute any of the Windows batch files so that the dynamic DOS box is presented on the screen (do not press any key when the batch file finishes executing)</para>
      </listitem>
      <listitem>
        <para>either left-click on the DOS box icon in the title bar, or right-click anywhere on the title bar</para>
      </listitem>
      <listitem>
        <para>select “Properties”</para>
      </listitem>
      <listitem>
        <para>click on the “Layout” tab</para>
      </listitem>
      <listitem>
        <para>in the “Screen Buffer Size” set of values, change the “Height” value typing in a large number such as “2000”</para>
      </listitem>
      <listitem>
        <para>click on the “OK” button</para>
      </listitem>
      <listitem>
        <para>when the batch file finishes executing, press any key to exit</para>
      </listitem>
    </itemizedlist>
    <para>The next time the dynamic command DOS box is used, the new setting for the height will be in play. When the batch file completes execution, one can scroll up through the history to see the complete report.</para>
  </section>
  <!--  <bibliography>
    <para>See article-bibliography.xml for bibliographic entries.</para>
  </bibliography>-->
</article>
